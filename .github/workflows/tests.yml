name: tests

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

jobs:
  test:
    strategy:
      matrix:
        platform: [ ubuntu-latest, windows-latest ]
        python-version: [ '3.10', '3.11', '3.12' ]

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 20

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      PAT: ${{ secrets.PAT }} # Ensure the PAT is accessible here

    steps:
      - name: Trigger MongoDB Setup
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # For Windows, use PowerShell's Invoke-RestMethod
          $body = @{
              event_type = "setup-mongodb"
              client_payload = @{
                  DB_HOST = "${env:DB_HOST}"
                  DB_PORT = "${env:DB_PORT}"
                  DB_USERNAME = "${env:DB_USERNAME}"
                  DB_PASSWORD = "${env:DB_PASSWORD}"
                  DB_NAME = "${env:DB_NAME}"
              }
          } | ConvertTo-Json
          Invoke-RestMethod -Uri "https://api.github.com/repos/${env:OWNER}/${env:REPO}/dispatches" -Method Post -Headers @{ "Authorization" = "token ${env:PAT}"; "Accept" = "application/vnd.github.everest-preview+json"; "Content-Type" = "application/json" } -Body $body
          
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          DEBUG: "true"

      - name: Trigger MongoDB Setup
        if: runner.os != 'Windows'
        run: |
          # For Ubuntu, use curl
          curl -X POST \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.everest-preview+json" \
              -H "Content-Type: application/json" \
              https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/dispatches \
              --data '{"event_type": "setup-mongodb", "client_payload": {"DB_HOST": "${{ secrets.DB_HOST }}", "DB_PORT": "${{ secrets.DB_PORT }}", "DB_USERNAME": "${{ secrets.DB_USERNAME }}", "DB_PASSWORD": "${{ secrets.DB_PASSWORD }}", "DB_NAME": "${{ secrets.DB_NAME }}"}}'

        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          DEBUG: "true"

      - name: Wait for MongoDB setup completion
        if: env.DEBUG == 'true'
        run: sleep 30 
 
      - name: Checkout repo
        uses: actions/checkout@v3
 
      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
         
      - name: Install dependencies
        run: |
          cd backend/
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install flake8 pytest
        
      - name: Lint with flake8
        run: |
          cd backend/
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
      - name: Run tests
        run: |
          cd backend/
          python -m pytest
