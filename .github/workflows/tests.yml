name: tests

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
        python-version: [ '3.10', '3.11', '3.12' ]
 
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 20

    env:
      DB_HOST: localhost
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      PAT: ${{ secrets.PAT }}

    services:
      mongodb:
        image: mongo:4.4.6
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
          MONGO_INITDB_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install Mongosh
        run: |
          sudo apt-get install gnupg
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      - name: Initialize MongoDB
        run: |
          mongosh --host $DB_HOST:$DB_PORT -u admin -p admin --authenticationDatabase admin <<EOF
            use $DB_NAME
            db.createUser({
              user: "$DB_USERNAME",
              pwd: "$DB_PASSWORD",
              roles: ["readWrite"]
            })
          EOF

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          cd backend/
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          cd backend/
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          cd backend/
          python -m pytest
